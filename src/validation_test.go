// controller
package main

import "testing"

func TestIsHex40(t *testing.T) {
	tests := []struct {
		name          string
		input         string
		expectedMatch bool
	}{
		{
			name:          "Empty Input",
			input:         "",
			expectedMatch: false,
		},
		{
			name:          "Valid lowercase",
			input:         "0123456789abcdef0123456789abcdef01234567",
			expectedMatch: true,
		},
		{
			name:          "Valid uppercase",
			input:         "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCD",
			expectedMatch: true,
		},
		{
			name:          "Valid Example SHA1",
			input:         "84081ad777d54bf4fea1a4a9a37b1224c47347af",
			expectedMatch: true,
		},
		{
			name:          "Valid mixed case",
			input:         "aBcDeF0123456789ABCDEF0123456789abcdefAB",
			expectedMatch: true,
		},
		{
			name:          "Valid Only Numbers",
			input:         "0123456789012345678901234567890123456789",
			expectedMatch: true,
		},
		{
			name:          "Valid Only Alphabetic Hex",
			input:         "aAbBcCdDeEfFaAbBcCdDeEfFaAbBcCdDeEfFaAbB",
			expectedMatch: true,
		},
		{
			name:          "Invalid Short",
			input:         "0123456789abcdef",
			expectedMatch: false,
		},
		{
			name:          "Invalid Long",
			input:         "0123456789abcdef0123456789abcdef0123456789",
			expectedMatch: false,
		},
		{
			name:          "Invalid Non-Hex Single Char",
			input:         "0123456789abcdef0123456789abcdef012345g7",
			expectedMatch: false,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			stringIsHex := isHex40(test.input)

			if stringIsHex != test.expectedMatch {
				t.Errorf("Expected input to be 40 character hexadecimal? %t - Text is actually 40 char hex? %t", test.expectedMatch, stringIsHex)
			}
		})
	}
}

func TestHasHex64Prefix(t *testing.T) {
	tests := []struct {
		name           string
		input          string
		expectedMatch  bool
		expectedOutput string
	}{
		{
			name:           "Empty Input",
			input:          "",
			expectedOutput: "",
			expectedMatch:  false,
		},
		{
			name:           "Valid lowercase",
			input:          "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
			expectedOutput: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
			expectedMatch:  true,
		},
		{
			name:           "Valid with extra",
			input:          "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdefEXTRA",
			expectedOutput: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
			expectedMatch:  true,
		},
		{
			name:           "Valid uppercase",
			input:          "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCD",
			expectedOutput: "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCD",
			expectedMatch:  true,
		},
		{
			name:           "Valid Example SHA256",
			input:          "f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2\n",
			expectedOutput: "f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2",
			expectedMatch:  true,
		},
		{
			name:           "Valid mixed case",
			input:          "aBcDeF0123456789ABCDEF0123456789abcdefABCDEFabcdef0123456789ABCD",
			expectedOutput: "aBcDeF0123456789ABCDEF0123456789abcdefABCDEFabcdef0123456789ABCD",
			expectedMatch:  true,
		},
		{
			name:           "Valid Only Numbers",
			input:          "0123456789012345678901234567890123456789012345678901234567890123",
			expectedOutput: "0123456789012345678901234567890123456789012345678901234567890123",
			expectedMatch:  true,
		},
		{
			name:           "Invalid Last Char",
			input:          "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdeg",
			expectedOutput: "",
			expectedMatch:  false,
		},
		{
			name:           "Invalid First Char",
			input:          "g0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde",
			expectedOutput: "",
			expectedMatch:  false,
		},
		{
			name:           "Invalid Short",
			input:          "0123456789abcdef",
			expectedOutput: "",
			expectedMatch:  false,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			stringHasHex, hash := hasHex64Prefix(test.input)

			if stringHasHex != test.expectedMatch {
				t.Errorf("Expected input to start with 64 character hexadecimal? %t - Text actually starts with 64 char hex? %t", test.expectedMatch, stringHasHex)
			}
			if hash != test.expectedOutput {
				t.Errorf("Expected output: '%s' - Got: '%s'", test.expectedOutput, hash)
			}
		})
	}
}

func TestIsText(t *testing.T) {
	tests := []struct {
		name         string
		input        []byte
		expectedText bool
	}{
		{
			name:         "Empty Input",
			input:        []byte{},
			expectedText: true,
		},
		{
			name:         "Single ASCII Byte",
			input:        []byte{84},
			expectedText: true,
		},
		{
			name:         "Single Non-ASCII Byte",
			input:        []byte{250},
			expectedText: false,
		},
		{
			name:         "Regular Text",
			input:        []byte("This is some plain text here but is also some extra data to expand the full data. Also adding some additional characters like ! or even ? or maybe %."),
			expectedText: true,
		},
		{
			name:         "JPG",
			input:        []byte{255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 255, 219, 0, 132, 0, 8, 6, 6, 7, 6, 5, 8, 7, 7, 7, 9, 9, 8, 10, 12, 20, 13, 12, 11, 11, 12, 25, 18, 19, 15, 20, 29, 26, 31, 30, 29, 26, 28, 28, 32, 36, 46, 39, 32, 34, 44, 35, 28, 28, 40, 55, 41, 44, 48, 49, 52, 52, 52, 31, 39, 57, 61, 56, 50, 60, 46, 51, 52, 50, 1, 9, 9, 9, 12, 11, 12, 24, 13, 13, 24, 50, 33, 28, 33, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 255, 194, 0, 17, 8, 4, 114, 7, 128, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 53, 0, 0, 1, 5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 3, 4, 6, 1, 7, 8, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 4, 5, 6, 7, 255, 218, 0, 12, 3, 1, 0, 2, 16, 3, 16, 0, 0, 0, 217, 90, 205, 90, 238, 242, 55, 22, 114, 197, 229, 114, 170, 181, 153, 81, 241, 91, 143, 94, 139, 227, 190, 32, 17, 219, 16, 175, 60, 157, 3, 96, 47, 203, 90, 129, 58, 46, 180, 78, 1, 183, 166, 138, 76, 167, 87, 118, 23, 49, 247, 179, 116, 104, 44, 43, 167, 105, 85, 90, 118, 122, 221, 213, 191, 96, 107, 179, 74, 74, 54, 202, 61, 247, 209, 112, 17, 237, 57, 21, 200, 206, 54, 234, 210, 197, 154, 214, 82, 147, 79, 94, 124, 165, 206, 40, 146, 210, 83, 165, 13, 33, 200, 165, 141, 161, 90, 118, 73, 185, 201, 161, 147, 54, 91, 48, 89, 90, 86, 188, 201, 135, 137, 208, 191, 14, 85, 187, 67, 112, 40, 219, 149, 43, 202, 38, 185, 64, 182, 231, 154, 179, 166, 108, 79, 154, 60, 222, 68, 248, 66, 24, 186, 198, 200, 171, 216, 135, 114, 20, 235, 27, 157, 176, 150, 107, 32, 81, 7, 26, 150, 143, 123, 28, 18, 246, 23, 3, 163, 76, 14, 181, 177, 105, 51, 169, 243, 114, 243, 199, 119, 2, 86, 194, 144, 205, 208, 92, 5, 110, 110, 66, 200, 217, 87, 72, 114, 148, 202, 215, 172, 85, 177, 140, 238, 177, 152, 210, 207, 66, 208, 75, 214, 37, 210, 86, 168, 217, 90, 223, 176, 58, 117, 173, 229, 81, 102, 217, 237, 110, 155, 97, 213, 86, 18, 199, 3, 53, 105, 10, 58, 34, 144, 8, 32, 168, 59, 242, 141, 166, 250, 53, 155, 105, 77, 89, 241, 239, 134, 109, 88, 96, 179, 221, 106, 44, 159, 172, 114, 213, 137, 147, 33, 183, 86, 214, 5, 13, 15, 191, 26, 16, 38, 46, 220, 170, 86, 106, 183, 18, 180, 199, 159, 136, 49, 109, 43, 90, 208, 28, 203, 213, 117, 106, 71, 106, 201, 131, 228, 49, 56, 193, 89, 161, 234, 232, 107, 134, 58, 48, 120, 47, 244, 193, 113, 28, 31, 170, 58, 50, 21, 117, 99, 236, 150, 52, 225, 56, 175, 206, 183, 19, 98, 199, 146, 140, 177, 10},
			expectedText: false,
		},
		{
			name:         "PNG",
			input:        []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 0, 0, 0, 2, 0, 8, 6, 0, 0, 0, 244, 120, 212, 250, 0, 0, 34, 145, 73, 68, 65, 84, 120, 218, 236, 221, 177, 13, 195, 48, 16, 4, 65, 39, 86, 93, 10, 216, 127, 77, 78, 92, 192, 1, 78, 228, 197, 124, 1, 67, 108, 116, 33, 95, 231, 220, 215, 57, 247, 251, 245, 195, 157, 115, 191, 191, 206, 197, 227, 241, 120, 60, 30, 239, 15, 188, 84, 12, 143, 199, 227, 241, 120, 188, 237, 202, 49, 60, 30, 143, 199, 227, 241, 140, 63, 143, 199, 227, 241, 120, 188, 114, 12, 143, 199, 227, 241, 120, 60, 227, 207, 227, 241, 120, 60, 30, 175, 28, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 158, 249, 56, 143, 199, 227, 241, 120, 60, 227, 207, 227, 241, 120, 60, 30, 207, 248, 243, 120, 60, 30, 143, 199, 51, 254, 60, 30, 143, 199, 227, 241, 140, 63, 143, 199, 227, 241, 120, 60, 227, 207, 227, 241, 120, 60, 30, 175, 30, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 182, 75, 197, 240, 120, 60, 30, 143, 199, 219, 174, 28, 195, 227, 241, 120, 60, 30, 207, 248, 243, 120, 60, 30, 143, 199, 43, 199, 240, 120, 60, 30, 143, 199, 51, 254, 60, 30, 143, 199, 227, 241, 202, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 252, 18, 200, 227, 241, 120, 60, 30, 207, 248, 243, 120, 60, 30, 143, 199, 123, 230, 227, 60, 30, 143, 199, 227, 241, 140, 63, 143, 199, 227, 241, 120, 60, 227, 207, 227, 241, 120, 60, 30, 207, 248, 243, 120, 60, 30, 143, 199, 51, 254, 60, 30, 143, 199, 227, 241, 118, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 187, 84, 12, 143, 199, 227, 241, 120, 188, 237, 202, 49, 60, 30, 143, 199, 227, 241, 140, 63, 143, 199, 227, 241, 120, 188, 114, 12, 143, 199, 227, 241, 120, 60, 227, 207, 227, 241, 120, 60, 30, 175, 28, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 111, 243, 82, 49, 60, 30, 143, 199, 227, 241, 54, 47, 21, 195, 227, 241, 120, 60, 30, 207, 47, 129, 60, 30, 143, 199, 227, 241, 140, 63, 143, 199, 227, 241, 120, 188, 103, 62, 206, 227, 241},
			expectedText: false,
		},
		{
			name:         "PDF",
			input:        []byte{37, 80, 68, 70, 45, 49, 46, 52, 10, 37, 211, 235, 233, 225, 10, 49, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 84, 105, 116, 108, 101, 32, 40, 66, 114, 111, 99, 104, 117, 114, 101, 41, 10, 47, 80, 114, 111, 100, 117, 99, 101, 114, 32, 40, 83, 107, 105, 97, 47, 80, 68, 70, 32, 109, 49, 49, 49, 32, 71, 111, 111, 103, 108, 101, 32, 68, 111, 99, 115, 32, 82, 101, 110, 100, 101, 114, 101, 114, 41, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 51, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 99, 97, 32, 49, 10, 47, 66, 77, 32, 47, 78, 111, 114, 109, 97, 108, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 54, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 84, 121, 112, 101, 32, 47, 88, 79, 98, 106, 101, 99, 116, 10, 47, 83, 117, 98, 116, 121, 112, 101, 32, 47, 73, 109, 97, 103, 101, 10, 47, 87, 105, 100, 116, 104, 32, 56, 48, 48, 10, 47, 72, 101, 105, 103, 104, 116, 32, 56, 48, 48, 10, 47, 67, 111, 108, 111, 114, 83, 112, 97, 99, 101, 32, 47, 68, 101, 118, 105, 99, 101, 82, 71, 66, 10, 47, 83, 77, 97, 115, 107, 32, 55, 32, 48, 32, 82, 10, 47, 66, 105, 116, 115, 80, 101, 114, 67, 111, 109, 112, 111, 110, 101, 110, 116, 32, 56, 10, 47, 70, 105, 108, 116, 101, 114, 32, 47, 70, 108, 97, 116, 101, 68, 101, 99, 111, 100, 101, 10, 47, 76, 101, 110, 103, 116, 104, 32, 57, 57, 56, 55, 62, 62, 32, 115, 116, 114, 101, 97, 109, 10, 120, 156, 237, 221, 189, 178, 37, 197, 181, 133, 209, 126, 255, 71, 187, 10, 60, 57, 152, 120, 114, 192, 130, 80, 224, 221, 134, 70, 77, 115, 250, 252, 236, 159, 154, 53, 51, 87, 141, 17, 60, 192, 217, 85, 43, 106, 125, 36, 169, 208, 127, 255, 251, 223, 255, 252, 231, 63, 191, 3, 0, 112, 144, 223, 126, 251, 237, 191, 18, 139, 67, 253, 10, 1, 63, 67, 70, 123, 180, 153, 233, 183, 63, 73, 44, 14, 212, 254, 88, 50, 211, 79, 144, 209, 30, 109, 102, 250, 237, 127, 36, 22, 71, 249, 213, 81, 3, 1, 159, 63, 80, 237, 61, 204, 76, 237, 209, 102, 166, 79, 159, 62, 73, 44, 142, 165, 175, 72, 208, 87, 132, 180, 71, 155, 153, 62, 253, 73, 98, 113, 32, 125, 69, 130, 190, 34, 164, 61, 218, 204, 244, 233, 127, 36, 22, 71, 209, 87, 36, 232, 43, 66, 218, 163, 205, 76, 159, 190, 33, 177, 56, 132, 190, 34, 65, 95, 17, 210, 30, 109, 102, 250, 244, 79, 18, 139, 231, 233, 43, 18, 244, 21, 33, 237, 209, 102, 166, 79, 223, 145, 88, 60, 73, 95, 145, 160, 175, 8, 105, 143, 54, 51, 125, 223, 87, 18, 139, 39, 233, 43, 18, 244, 21, 33, 237, 209, 102, 166, 87, 251, 74, 98, 241, 12, 125, 69, 130, 190, 34, 164, 61, 218, 204, 244, 86, 95, 73, 44, 30, 166, 175, 72, 208, 87, 132, 180, 71, 155, 153, 222, 233, 43, 137, 197, 99, 244, 21, 9, 250, 138, 144, 246, 104, 51, 211, 251, 125, 37, 177, 120, 128, 190, 34, 65, 95, 17, 210, 30, 109, 102, 250, 176, 175, 36, 22, 247, 210, 87, 36},
			expectedText: false,
		},
		{
			name:         "ELF Binary",
			input:        []byte{127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 62, 0, 1, 0, 0, 0, 96, 126, 71, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 88, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 56, 0, 5, 0, 64, 0, 14, 0, 13, 0, 6, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 49, 33, 60, 0, 0, 0, 0, 0, 49, 33, 60, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 48, 60, 0, 0, 0, 0, 0, 0, 48, 124, 0, 0, 0, 0, 0, 0, 48, 124, 0, 0, 0, 0, 0, 104, 26, 62, 0, 0, 0, 0, 0, 104, 26, 62, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 80, 122, 0, 0, 0, 0, 0, 0, 80, 186, 0, 0, 0, 0, 0, 0, 80, 186, 0, 0, 0, 0, 0, 224, 229, 5, 0, 0, 0, 0, 0, 80, 253, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 81, 229, 116, 100, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 49, 17, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 48, 124, 0, 0, 0, 0, 0, 0, 48, 60, 0, 0, 0, 0, 0, 129, 213, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 160, 5, 149, 0, 0, 0, 0, 0, 160, 5, 85, 0, 0, 0, 0, 0, 96, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 47, 149, 0, 0, 0, 0, 0, 0, 47, 85, 0, 0, 0, 0, 0, 120, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 120, 59, 149, 0, 0, 0, 0, 0, 120, 59, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 128, 59},
			expectedText: false,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			stringIsText := isText(&test.input)

			if stringIsText != test.expectedText {
				t.Errorf("Expected input to be text? %t - Text is actually text? %t", test.expectedText, stringIsText)
			}
		})
	}
}
